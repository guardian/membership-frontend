/* ==========================================================================
   Grid
   ========================================================================== */

/* Grid Shared
   ========================================================================== */

.grid {
    @include clearfix;
    list-style: none;
    margin: 0;
}
.grid__item {
    border-color: transparent;
    margin-bottom: rem($gs-gutter / 2);

    @include mq(mobileLandscape) {
        margin-bottom: rem($gs-baseline);
    }
}

// Drop bottom margins if we know we only
// have a single row of grid items.
.grid--single-row {
    @include mq(desktop) {
        .grid__item {
            margin-bottom: 0 !important;
        }
    }
}

.grid--bordered {
    .grid__item {
        border-color: $c-neutral5;
    }
}

/**
 * See: One True Layout Method
 *      http://css-tricks.com/fluid-width-equal-height-columns/
 */
.grid--stretch {
    overflow: hidden;
    .grid__item {
        margin-bottom: -99999px !important;
        padding-bottom: 99999px !important;
    }
}

.grid--2up,
.grid--3up,
.grid--4up {
    @include mq(mobileLandscape) {
        width: 100% + $gutter-width-fluid;
        margin-left: -$gutter-width-fluid;
    }
    .grid__item {
        @include mq(mobileLandscape) {
            float: left;
            margin-left: $gutter-width-fluid / 2;
            padding-left: $gutter-width-fluid / 2;
            margin-bottom: rem($gs-baseline);
            width: 50% - ($gutter-width-fluid / 2);
            &:nth-of-type(2n+1) { clear: left; }
        }
        @include mq(tablet) {
            border-style: solid;
            border-width: 0 0 0 1px;
        }
    }
}

/* Grid 2up
   ========================================================================== */

.grid--2up {
    .grid__item {
        @include mq(tablet) {
            &:nth-of-type(2n+1) { clear: left; border-left: none; }
        }
    }
}

.grid--2up-stacked {
    @include mq(desktop) {
        width: 100% + $gutter-width-fluid;
        margin-left: -$gutter-width-fluid;
    }
    .grid__item {
        @include mq(desktop) {
            float: left;
            border-style: solid;
            border-width: 0 0 0 1px;
            margin-left: $gutter-width-fluid / 2;
            padding-left: $gutter-width-fluid / 2;
            margin-bottom: rem($gs-baseline);
            width: 50% - ($gutter-width-fluid / 2);
            &:nth-of-type(2n+1) { clear: left; border-left: none; }
        }
    }
}

/* Grid 3up
   ========================================================================== */

.grid--3up {
    .grid__item {
        @include mq(tablet) {
            width: 33.3% - ($gutter-width-fluid / 2);
            &:nth-of-type(2n+1) { clear: none; }
            &:nth-of-type(3n+1) { clear: left; border-left: none; }
        }
    }
}

/* 3up Stacked (3 > 1)
   ========================================================================== */

.grid--3up-stacked {
    @include mq(tablet) {
        width: 100% + $gutter-width-fluid;
        margin-left: -$gutter-width-fluid;
    }
    .grid__item {
        @include mq(tablet) {
            float: left;
            border-style: solid;
            border-width: 0 0 0 1px;
            margin-left: $gutter-width-fluid / 2;
            padding-left: $gutter-width-fluid / 2;
            margin-bottom: rem($gs-baseline);
            width: 33.3% - ($gutter-width-fluid / 2);
            &:nth-of-type(3n+1) { clear: left; border-left: none; }
        }
    }
}

/* Grid 4up
   ========================================================================== */

.grid--4up {
    .grid__item {
        @include mq(tablet) {
            width: 25% - ($gutter-width-fluid / 2);
            &:nth-of-type(2n+1) { clear: none; }
            &:nth-of-type(4n+1) { clear: left; border-left: none; }
        }
    }
}

// =============================================================================
// Guss grid system
// =============================================================================

// gs- prefix stand for Grid System

/**
 * Gutter width.
 *
 * @type Number
 *
 * @group grid-system
 */
$gs-gutter: 20px !default;

/**
 * Baseline size.
 *
 * @type Number
 *
 * @group grid-system
 */
$gs-baseline: 12px !default;

/**
 * Column width.
 *
 * @type Number
 *
 * @group grid-system
 */
$gs-column-width: 60px !default;

/**
 * Row height.
 *
 * @type Number
 *
 * @group grid-system
 */
$gs-row-height: 36px !default;

/**
 * Number of columns.
 *
 * @type Number
 *
 * @group grid-system
 */
$gs-max-columns: 16 !default;


// Helpers
// =============================================================================

/**
 * Grid span.
 * Compute the width of a given number of grid columns.
 *
 * @example
 * .element {
 *   width: gs-span(3);
 * }
 *
 * @param {Number} $n-columns
 *
 * @requires {variable} gs-column-width
 * @requires {variable} gs-gutter
 *
 * @return {Number}
 *
 * @group grid-system
 */
@function gs-span($n-columns) {
    @return $n-columns * $gs-column-width + $gs-gutter * ($n-columns - 1);
}

/**
 * Grid height.
 * Compute the height of a given number of vertical grid units.
 *
 * @example
 * .element {
 *   padding-top: gs-height(2);
 * }
 *
 * @param {Number} $n-rows
 *
 * @requires {variable} gs-row-height
 * @requires {variable} gs-baseline
 *
 * @return {Number}
 *
 * @group grid-system
 */
@function gs-height($n-rows) {
    @return $n-rows * $gs-row-height + $gs-baseline * ($n-rows - 1);
}

/**
 * Grid container.
 * Snaps to `$gs-max-columns` columns at the wide breakpoint.
 *
 * @requires {mixin} mq
 * @requires {function} gs-span
 * @requires {variable} gs-gutter
 * @requires {variable} gs-max-columns
 *
 * @group grid-system
 */
@mixin gs-container {
    position: relative;
    margin: 0 auto;
    max-width: gs-span(14) + $gs-gutter * 2;

    @include mq(wide) {
        max-width: gs-span($gs-max-columns) + $gs-gutter * 2;
    }
}

/**
 * Grid columns helper classes, useful for quick prototyping.
 *
 * @example markup
 * <div class="gs-span-3"></div>
 *
 * @requires {variable} gs-max-columns
 * @requires {function} gs-span
 *
 * @group grid-system
 */
@mixin gs-helpers {
    @for $n from 1 through $gs-max-columns {
        .gs-span-#{$n} {
            width: gs-span($n);
        }
    }
}


// Output grid system helper classes
// =============================================================================

/**
 * Grid system.
 *
 * @requires {mixin} gs-container
 *
 * @group grid-system
 */
@mixin grid-system {
    .gs-container {
        @include gs-container;
    }
}

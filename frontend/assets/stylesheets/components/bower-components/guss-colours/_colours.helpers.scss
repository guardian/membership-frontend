/**
 * Get a colour from a given colour palette.
 * 
 * @param {String} $name                    - colour to get
 * @param {Map}    $palette ($guss-colours) - palette
 *
 * @requires {variable} guss-colours
 *
 * @return {Color | Null}
 *
 * @group colours
 */
@function guss-colour($name, $palette: $guss-colours) {
    @return map-get($palette, $name);
}

/**
 * Generate helper classes for a given colour palette  
 * Outputs rules such as: `.c-red { color: red; }`.
 *
 * @param {Map}    $palette  ($guss-colours) - palette
 * @param {String} $prefix   ("c-")          - prefix
 * @param {String} $property ("color")       - property
 *
 * @requires {variable} guss-colours
 *
 * @group colours
 */
@mixin guss-generate-colour-classes($palette: $guss-colours, $prefix: "c-", $property: "color") {
    @each $name, $color in $palette {
        .#{unquote($prefix + $name)} {
            #{$property}: $color;
        }
    }
}

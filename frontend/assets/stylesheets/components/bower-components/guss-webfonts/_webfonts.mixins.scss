/**
 * Output a @font-face declaration at root level.
 *
 * @param {String} $family - List to search in
 * @param {String} $file - The filename
 * @param {String} $base-path - Directory where the font is stored
 * @param {Number} $weight (400) - CSS font-weight
 * @param {String} $style (normal) - CSS font-style
 * @param {String} $url ($guss-webfonts-base-url) - URL
 *
 * @requires {variable} guss-webfonts-base-url
 *
 * @group webfonts
 */
@mixin guss-at-font-face(
    $family,
    $filename,
    $path,
    $weight: 400,
    $style: 'normal',
    $url: $guss-webfonts-base-url
) {
    @at-root {
        @font-face {
            font-family: $family;
            src: url('#{$url + $path + $filename}.eot'); // IE9 Compat Modes
            src: url('#{$url + $path + $filename}.eot?#iefix') format('embedded-opentype'), // IE6-IE8
                 url('#{$url + $path + $filename}.woff2') format('woff2'), // Very Modern Browsers
                 url('#{$url + $path + $filename}.woff') format('woff'), // Modern Browsers
                 url('#{$url + $path + $filename}.ttf') format('truetype'), // Safari, Android, iOS
                 url('#{$url + $path + $filename}.svg##{$filename}') format('svg'); // Legacy iOS
            font-weight: $weight;
            font-style: unquote($style);
            font-stretch: normal;
        }
    }
}

/**
 * Output the @font-face declaration for a Guss webfont.
 *
 * @param {Number} $font-family - ID of the font in $guss-webfonts
 * @param {Map} $properties - weight (member of `$guss-font-weights`), style (`normal` | `italic`)
 * @param {Map} $overrides - weight (member of `$guss-font-weights`), style (`normal` | `italic`)
 *
 * @requires {variable} guss-webfonts
 * @requires {function} compose-webfont-filename
 * @requires {function} compose-webfont-path
 * @requires {function} guss-font-weight
 * @requires {mixin} guss-at-font-face
 *
 * @group webfonts
 */
@mixin guss-webfonts-single-declaration(
    $font-family,
    $properties: (weight: 'regular', style: 'normal'),
    $overrides: (weight: false, style: false)
) {
    $font: map-get($guss-webfonts, $font-family);
    $font-weight-override: map-get($overrides, weight);
    $font-style-override: map-get($overrides, style);

    $font-filename: compose-webfont-filename($font-family, map-get($properties, weight), map-get($properties, style));
    $full-path: compose-webfont-path($font-family);
    $font-weight: guss-font-weight(if($font-weight-override, $font-weight-override, map-get($properties, weight)));
    $font-style: if($font-style-override, $font-style-override, map-get($properties, style));

    @include guss-at-font-face(
        $family: $font-family,
        $filename: $font-filename,
        $path: $full-path,
        $weight: $font-weight,
        $style: $font-style
    );
}

/**
 * Output the @font-face declaration for Guss webfonts.
 *
 * @param {String|List|Map} $fonts ($guss-webfonts) - Fonts to output
 * @param {Map} $registry ($guss-webfonts) - Font registry
 *
 * @requires {variable} guss-webfonts
 * @requires {mixin} guss-webfonts-single-declaration
 * @requires {mixin} guss-webfonts
 *
 * @group webfonts
 */
@mixin guss-webfonts($fonts: $guss-webfonts, $registry: $guss-webfonts) {
    @if type-of($fonts) == 'string' {
        @each $properties in map-get($registry, $fonts) {
            @include guss-webfonts-single-declaration($fonts, $properties);
        }
    } @else {
        @if type-of($fonts) == 'list' {
            @each $font in $fonts {
                @include guss-webfonts($font);
            }
        } @else {
            @each $font-family, $font-property-sets in $fonts {
                @each $properties in $font-property-sets {
                    @if map-has-key($properties, use-as) {
                        @include guss-webfonts-single-declaration($font-family, $properties, map-get($properties, use-as));
                    } @else {
                        @include guss-webfonts-single-declaration($font-family, $properties);
                    }
                }
            }
        }
    }
}

/**
 * Machine-readable CSS font-weight.
 *
 * @param {String} $keyword - Human-readable keyword in $guss-font-weights
 *
 * @requires {variable} guss-font-weights
 *
 * @example scss
 * font-weight: guss-font-weight(light);
 *
 * @return {Number} - CSS font-weight
 *
 * @group webfonts
 */
@function guss-font-weight($keyword) {
    @return map-get($guss-font-weights, $keyword);
}

/**
 * Is this font stored in `$guss-extras-directory`?
 *
 * @param {String} $font-family - Font to look for
 *
 * @requires {variable} guss-webfonts-extras
 *
 * @return {Bool}
 *
 * @group webfonts
 */
@function is-extra($font-family) {
    @return contain($guss-webfonts-extras, $font-family);
}

/**
 * Replace `$search` by `$replace` in `$string`.
 *
 * @author Hugo Giraudel
 *
 * @param {String} $string - string to update
 * @param {String} $search - value to replace
 * @param {String} $replace ('') - new value
 *
 * @return {String}
 *
 * @group webfonts
 */
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @while $index {
        $string: str-slice($string, 1, $index - 1) + $replace + str-slice($string, $index + 1);
        $index: str-index($string, $search);
    }

    @return $string;
}

/**
 * Remove white space in $string
 *
 * @requires {function} str-replace
 *
 * @param {String} $string - string to update
 *
 * @return {String}
 *
 * @group webfonts
 */
@function str-remove-white-space($string) {
    @return str-replace($string, ' ', '');
}

/**
 * Capitalise first letter of $string
 *
 * @param {String} $string - string to update
 *
 * @return {String}
 *
 * @group webfonts
 */
@function str-capitalise($string) {
    $string: $string + unquote(''); // Make sure $string has a type of String
    $first-letter: to-upper-case(str-slice($string, 0, 1));
    $rest-of-string: str-slice($string, 2);

    @return $first-letter + $rest-of-string;
}

/**
 * Compose webfont filename
 *
 * @param {String} $font-family - font family
 * @param {String} $weight - weight, member of $guss-font-weights
 * @param {String} $style - normal | italic
 *
 * @requires {function} str-capitalise
 * @requires {function} str-remove-white-space
 *
 * @example scss
 * src: url('#{compose-webfont-filename('Guardian Text Sans Web', bold, italic)}.woff');
 * -> src: url("GuardianTextSansWeb-BoldItalic.eot");
 *
 * @return {String}
 *
 * @group webfonts
 */
@function compose-webfont-filename($font-family, $weight, $style) {
    $style: if($style == normal, '', str-capitalise($style));
    $weight: str-capitalise($weight);
    $font: str-remove-white-space($font-family);

    $filename: $font + '-' + $weight + $style;

    @return $filename;
}

/**
 * Compose webfont path
 * "My Font" is in the MyFont/ directory
 * "Extra" fonts are stored in `$guss-extras-directory`.
 *
 * @param {String} $font-family - font name
 *
 * @requires {variable} guss-extras-directory
 * @requires {variable} guss-webfonts-path
 * @requires {function} str-remove-white-space
 *
 * @return {String} - Path to the font
 *
 * @group webfonts
 */
@function compose-webfont-path($font-family) {
    $directory: if(is-extra($font-family), $guss-extras-directory, str-remove-white-space($font-family));
    $path: $guss-webfonts-path + $directory + '/';

    @return $path;
}

/**
 * Look for `$needle` in `$haystack`.
 *
 * @param {List}   $haystack - List to search in
 * @param {String} $needle - The string to look for
 *
 * @return {Bool}
 *
 * @group webfonts
 */
@function contain($haystack, $needle) {
    @return not not index($haystack, $needle);
}

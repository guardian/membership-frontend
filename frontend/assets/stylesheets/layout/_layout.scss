/* ==========================================================================
   Layout
   ========================================================================== */

html {
    position: relative;
    min-height: 100%;
    background: $c-background url(/assets/images/common/bg-texture.jpg) repeat-y center;
    background-attachment: fixed;
    background-size: cover;
}

/**
 * Use flexbox for sticky footer
 * @see http://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/
 */
body {
    @include flexbox();
    @include flex-direction(column);
    min-height: 100vh;
}
.container-global {
    @include flex(1);
}

/* Layout Helpers
   ========================================================================== */

// Constrained layout helper
// Breakpoints are mirrored in mixins/_mixins-layout.scss
.l-constrained {
    $offset: ($gs-gutter * 2);
    margin: 0 auto;

    @include mq(tablet) {
        max-width: map-get($max-widths, max-tablet) + $offset;
    }
    @include mq(mem-full) {
        max-width: map-get($max-widths, max-desktop) + $offset;
    }
}

.l-inset {
    padding: rem($gs-baseline) rem($gs-gutter / 2) rem($gs-baseline * 2);

    @include mq(tablet) {
        padding-left: rem($gs-gutter);
        padding-right: rem($gs-gutter);
    }
}

.l-pad-vertical {
    margin-top: rem($gs-baseline / 2);
    margin-bottom: rem($gs-baseline / 2);
}

.l-pad-top {
    margin-top: rem($gs-baseline / 2);
}
.l-pad-bottom {
    margin-bottom: rem($gs-baseline / 2);
}

.l-pad-left {
    @include mq(tablet) {
        padding-left: rem(gs-span(1) + $gs-gutter);
    }
}

.l-pad-right {
    @include mq(tablet) {
        padding-right: rem(gs-span(1) + $gs-gutter);
    }
}

/* Side Margins
   ========================================================================== */

.l-side-margins,
.page-side-margins {
    &:before,
    &:after {
        background: $c-background-transparent;
        content: '';
        position: absolute;
        z-index: 1;
        top: 0;
        height: 100%;
        width: 0;
        @include side-margins-calc('width');
    }
    &:before {
        left: 0;
    }
    &:after {
        right: 0;
    }
}

/* Containers
   ========================================================================== */

.page-container {
    @extend .l-constrained;
    @include clearfix;
    position: relative;
}

.page-content {
    @include clearfix;
    background-color: $c-background;
    padding: 0 rem($gs-gutter / 2);
    position: relative;

    @include mq(mobileLandscape) {
        padding: 0 rem($gs-gutter);
    }
}
.page-content--padded {
    @include mq(tablet) {
        padding: 0 rem($gs-gutter * 4) rem($gs-gutter * 8);
    }
}

AWSTemplateFormatVersion: '2010-09-09'
Description: membership-app
Parameters:
  VpcId:
    Type: String
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Default: vpc-e6e00183
  PrivateVpcSubnets:
    Description: Private subnets to use for EC2 instances
    Type: List<AWS::EC2::Subnet::Id>
  PublicVpcSubnets:
    Description: Public subnets to use for the ELB
    Type: List<AWS::EC2::Subnet::Id>
  Stack:
    Description: Applied directly as a tag ('membership', or 'memb-masterclasses')
    Type: String
  Stage:
    Description: Applied directly as a tag
    Type: String
    Default: PROD
  App:
    Description: Applied directly as a tag
    Type: String
    Default: frontend
  SiteDomain:
    Description: Site domain Name
    Type: String
  AllowedIngressIps:
    Description: IP address range (CIDR) that access the site (e.g. '77.91.248.0/21'-
      Internal Guardian, or '0.0.0.0/0' - the whole internet!)
    Type: String
    Default: 0.0.0.0/0
  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
    - t2.small
    - t3.small
    ConstraintDescription: must be a valid EC2 instance type.
  ImageId:
    Description: AMI ID
    Type: String
  ELBSSLCertificate:
    Description: ELB SSL Certificate ARN
    Type: String
Mappings:
  StageVariables:
    PROD:
      DynamoDBTables:
      - arn:aws:dynamodb:*:*:table/MembershipSub-Promotions-PROD
      - arn:aws:dynamodb:*:*:table/MembershipSub-Promotions-UAT
      MinInstances: '3'
      MaxInstances: '6'
      InstanceName: PROD:membership-frontend
    CODE:
      DynamoDBTables:
      - arn:aws:dynamodb:*:*:table/MembershipSub-Promotions-DEV
      - arn:aws:dynamodb:*:*:table/MembershipSub-Promotions-UAT
      MinInstances: '1'
      MaxInstances: '2'
      InstanceName: CODE:membership-frontend
Conditions:
  IsProd: !Equals [!Ref Stage, 'PROD']
Resources:
  FrontendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Ref: PrivateVpcSubnets
      LaunchConfigurationName:
        Ref: FrontendLaunchConfig
      MinSize:
        Fn::FindInMap: [ StageVariables, { Ref: Stage }, MinInstances ]
      MaxSize:
        Fn::FindInMap: [ StageVariables, { Ref: Stage }, MaxInstances ]
      LoadBalancerNames:
      - Ref: FrontendElasticLoadBalancer
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
      - Key: Stack
        Value:
          Ref: Stack
        PropagateAtLaunch: 'true'
      - Key: App
        Value: !Ref App
        PropagateAtLaunch: 'true'
      - Key: Stage
        Value:
          Ref: Stage
        PropagateAtLaunch: 'true'
      - Key: Name
        Value:
          Fn::FindInMap: [ StageVariables, { Ref: Stage }, InstanceName ]
        PropagateAtLaunch: 'true'
  FrontendLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: ImageId
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: MembershipAppInstanceProfile
      AssociatePublicIpAddress: false
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -ev
            export stack='${Stack}'
            export app='${App}'
            export stage='${Stage}'
            export region='${AWS::Region}'
            aws s3 cp --region ${AWS::Region} s3://membership-dist/${Stack}/${Stage}/frontend/init-instance.sh .
            chmod o+x init-instance.sh
            ./init-instance.sh
  MembershipAppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: PrivateBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: arn:aws:s3:::membership-private/*
          - Effect: Allow
            Action: s3:GetObject
            Resource: arn:aws:s3:::github-public-keys/Membership-and-Subscriptions/*
      - PolicyName: SendingEmail
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ses:SendEmail
            - ses:SendRawEmail
            Resource: "*"
      - PolicyName: PushMetrics
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: "*"
      - PolicyName: PushLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource:
            - arn:aws:logs:*:*:*
      - PolicyName: DynamoPromotions
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:Query
            Resource:
              Fn::FindInMap: [ StageVariables, { Ref: Stage }, DynamoDBTables ]
      ManagedPolicyArns:
            - !Sub arn:aws:iam::${AWS::AccountId}:policy/guardian-ec2-role-for-ssm
  MembershipAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: MembershipAppRole
  FrontendElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
      - LoadBalancerPort: '443'
        InstancePort: 9000
        Protocol: HTTPS
        SSLCertificateId:
          Ref: ELBSSLCertificate
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      Subnets:
        Ref: PublicVpcSubnets
      HealthCheck:
        Target: HTTP:9000/healthcheck
        HealthyThreshold: '2'
        UnhealthyThreshold: '2'
        Interval: '10'
        Timeout: '5'
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit incoming HTTPS access on port 443, egress to port 9000
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp:
          Ref: AllowedIngressIps
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        CidrIp: 0.0.0.0/0
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open up ssh access and enable HTTP access on the configured
        port
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 77.91.248.0/21
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        CidrIp: 77.91.248.0/21
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
  FrontendELBDNSrecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: "/hostedzone/Z1E4V12LQGXFEC"
      Comment: CNAME for AWS ELB
      Name: !Sub ${SiteDomain}.origin.membership.guardianapis.com.
      Type: CNAME
      TTL: '120'
      ResourceRecords:
      - Fn::GetAtt:
        - FrontendElasticLoadBalancer
        - DNSName

Outputs:
  URL:
    Description: URL of the Frontend website
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - FrontendElasticLoadBalancer
          - DNSName
